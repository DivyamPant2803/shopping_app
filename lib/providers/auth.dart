import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shopapp/models/http_exception.dart';
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';

class Auth with ChangeNotifier{
  String _token;
  DateTime _expiryDate;
  String _userId;
  Timer _authTimer;

  bool get isAuth{
    return token != null;
  }

  String get token{
    if(_expiryDate != null && _expiryDate.isAfter(DateTime.now()) && _token != null){
      return _token;
    }
    return null;
  }

  String get userId{
    return _userId;
  }

  Future<void> _authenticate(String email, String password, String urlSegment) async{
    final url = "https://identitytoolkit.googleapis.com/v1/accounts:$urlSegment?key=AIzaSyDsSodHUS_ic4FBnvHcb4Hw89IuPHN0A4k";
    try{
      final response = await http.post(url, body: json.encode(
        {
          'email': email,
          'password' : password,
          'returnSecureToken' : true,
        },
      ),
      );
      final responseData = json.decode(response.body);
      if(responseData['error'] != null){
        throw HttpException(responseData['error']['message']);
      }
      _token = responseData['idToken'];   // idToken is generated by Firebase
      _userId = responseData['localId'];  // localId is generated by Firebase
      _expiryDate = DateTime.now().add(Duration(seconds: int.parse(responseData['expiresIn'])));       // expiresIn is generated by Firebase. It is the no of seconds for expiry and is in String
      _autoLogout();
      notifyListeners();
      final prefs = await SharedPreferences.getInstance();
      final userData = json.encode({'token' : _token, 'userId' : _userId, 'expiryDate' : _expiryDate.toIso8601String()});
      prefs.setString('userData', userData);
    }
    catch(error){
      throw error;
    }

    //print(json.decode(response.body));
  }

  Future<void> signUp(String email, String password) async{
    return _authenticate(email, password, 'signUp');
  }

  Future<void> login(String email, String password) async{
    return _authenticate(email, password, 'signInWithPassword');
  }

  void logOut() async{
    _token = null;
    _userId = null;
    _expiryDate = null;
    if(_authTimer != null){
      _authTimer.cancel();
      _authTimer = null;
    }
    notifyListeners();
    final prefs = await SharedPreferences.getInstance();
    //prefs.remove('userData');
    prefs.clear();
  }

  void _autoLogout(){
    if(_authTimer != null){
      _authTimer.cancel();
    }
    final timeToExpiry = _expiryDate.difference(DateTime.now()).inSeconds;
    _authTimer = Timer(
      Duration(seconds: timeToExpiry),
      logOut
    );
  }

  Future<bool> tryAutoLogin() async{
    final prefs = await SharedPreferences.getInstance();
    if(!prefs.containsKey('userData')){
      return false;
    }
    final extractedUserData = json.decode(prefs.getString('userData')) as Map<String, Object>;
    final expiryDate = DateTime.parse(extractedUserData['expiryDate']);
    if(expiryDate.isBefore(DateTime.now())){    //token is invalid
      return false;
    }
    _token = extractedUserData['token'];
    _userId = extractedUserData['userId'];
    _expiryDate = expiryDate;
    notifyListeners();
    _autoLogout();
    return true;
  }
}