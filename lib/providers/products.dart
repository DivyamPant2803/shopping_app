import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shopapp/models/http_exception.dart';
import 'dart:convert';

import 'product.dart';

class Products with ChangeNotifier{
  final String authToken;
  final String userId;
  List<Product> _items = [
   /* Product(
      id: 'p1',
      title: 'Red Shirt',
      description: 'A red shirt - it is pretty red!',
      price: 29.99,
      imageUrl:
      'https://cdn.pixabay.com/photo/2016/10/02/22/17/red-t-shirt-1710578_1280.jpg',
    ),
    Product(
      id: 'p2',
      title: 'Trousers',
      description: 'A nice pair of trousers.',
      price: 59.99,
      imageUrl:
      'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    ),
    Product(
      id: 'p3',
      title: 'Yellow Scarf',
      description: 'Warm and cozy - exactly what you need for the winter.',
      price: 19.99,
      imageUrl:
      'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    ),
    Product(
      id: 'p4',
      title: 'A Pan',
      description: 'Prepare any meal you want.',
      price: 49.99,
      imageUrl:
      'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    ),*/
  ];

  Products(this.authToken,this.userId ,this._items);

  List<Product> get items{
    return [..._items];    // Returning a copy of the items list
  }

  Product findId(String id){
    return items.firstWhere((prod) => prod.id == id);
  }
  List<Product> get favoriteItems {
    return _items.where((prodItem) => prodItem.isFavourite).toList();
  }

  Future<void> addProduct(Product product) async{
    final url = 'https://shopping-app-fa21e.firebaseio.com/products.json?auth=$authToken';
    try {
      final response = await http
          .post(url, body: json.encode(     // Converting object to json format to be stored in firebase
          {
            'title': product.title,
            'description': product.description,
            'price': product.price,
            'imageUrl': product.imageUrl,
            'creatorId' : userId,
          }));
      final newProduct = Product(   // This part will only execute after the above await code is executed
        title: product.title,
        price: product.price,
        description: product.description,
        imageUrl: product.imageUrl,
        id: json.decode(response.body)['name'],   // It gives the unique id generated by firebase
      );
      _items.add(newProduct);
      //_items.insert(0, newProduct);
      notifyListeners();
    }
    catch(error){
          print(error);
        throw error;    // So that this error can be catched where we called addProduct function
    }
  }

  Future<void> fetchAndSetProducts([bool filterByUser = false]) async{
    final filterString = filterByUser ? 'orderBy="creatorId"&equalTo="$userId"' : '';
    var url = 'https://shopping-app-fa21e.firebaseio.com/products.json?auth=$authToken&$filterString';
    try{
      final response = await http.get(url);
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      final List<Product> loadedProducts = [];
      if(extractedData == null)
        return;
      url = 'https://shopping-app-fa21e.firebaseio.com/userFavourites/$userId.json?auth=$authToken';
      final favouriteResponse = await http.get(url);
      final favouriteData = json.decode(favouriteResponse.body);

      extractedData.forEach((prodId, prodData) {
        loadedProducts.add(Product(
            id: prodId,
            title: prodData['title'],
            description: prodData['description'],
            price: prodData['price'],
            isFavourite: favouriteData == null ? false : favouriteData[prodId] ?? false,    // ?? checks if favouriteData[prodId] is null, if it is null then false will be returned
            imageUrl: prodData['imageUrl']));
      });
      _items = loadedProducts;
      notifyListeners();
    }
    catch(error){
      throw error;
    }

  }

  Future<void> updateProduct(String id, Product newProduct) async{
    final prodIndex = _items.indexWhere((prod) => prod.id == id);
    if(prodIndex >= 0){
      final url = 'https://shopping-app-fa21e.firebaseio.com/products/$id.json?auth=$authToken';
      await http.patch(url, body: json.encode({
        'title' : newProduct.title,
        'description' : newProduct.description,
        'imageUrl' : newProduct.imageUrl,
        'price' : newProduct.price,
      }));
      _items[prodIndex] = newProduct;
      notifyListeners();
    }
    else{
      print('...');
    }

  }

  Future<void> deleteProduct(String id) async{
    final url = 'https://shopping-app-fa21e.firebaseio.com/products/$id.json?auth=$authToken';
    final existingProductIndex = _items.indexWhere((prod) => prod.id == id);
    var existingProduct = _items[existingProductIndex];
    _items.removeAt(existingProductIndex);
    //_items.removeWhere((prod) => prod.id == id);
    notifyListeners();
    final response = await http.delete(url);
          if(response.statusCode >= 400){   // Some error might have been occurred, so we need to handle it
            _items.insert(existingProductIndex, existingProduct);   // If any error occurs, then re-insert the deleted element in the list
            notifyListeners();
            throw HttpException('Could not delete the product');  // Custom Exception
          }
          existingProduct = null;     // If successfully deleted, then remove from memory
  }
}